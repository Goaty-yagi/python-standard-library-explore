import ast

""" class ast.Module(body, type_ignores) 

The class ast.Module in the ast module of
Python represents the top-level structure of
a Python module. It is used to encapsulate
the entire content of a module in the Abstract Syntax Tree (AST).
"""

code = "x = 1"  # to be parced, code must be string.
code = """
# type: ignore
x = 1
"""
parced_ast = ast.parse(code, type_comments=True)  # returns Module obj
module_obj = ast.Module(code)  # Do not do this.
print(ast.dump(parced_ast, indent=4))

"""
The print above returns
Module(
    body=[
        Assign( # x = 1 is will be Assign instance
            targets=[
                Name(id='x', ctx=Store())],
            value=Constant(value=1))],
    type_ignores=[
        TypeIgnore(lineno=2, tag='')])
"""
print(parced_ast._fields)  # (body, type_ignores)
"""
body: A list of AST nodes representing the statements and expressions within the module.
type_ignores: A list of type ignore instance includes comments associated with the module.(mainly designed for typing)
When you add # type: ignore to a line in your code, it signals to the type checker(such as mypy)
that it should skip type checking for that particular line.
This can be useful in scenarios where the type checker
might have difficulty inferring or verifying types accurately.
"""

print()
print("---- ast.Expression ----")
print()

"""
class ast.Expression(body)
It is generated by ast.parse() when mode is "eval".

The ast.parse function with mode='eval' is designed for
parsing single expressions, and it expects a valid Python expression
as input intended for single-line expressions.
If your code spans multiple lines, it might result in a syntax error.

ast.Expression instance.body in not list
"""

code = "1 + 3"
parced_ast = ast.parse(code , mode='eval')
print(ast.dump(parced_ast, indent=4))

code = 'h = \
    90'
# parced_ast = ast.parse(code , mode='eval')  # Cause SyntaxError


print()
print("---- ast.Expression ----")
print()

""" class ast.Interactive(body) 
it designed for codes entered interactively
"""